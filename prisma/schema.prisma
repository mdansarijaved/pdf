// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  likes     Like[]
  watches   Watch[]
  ratings   Rating[]
}

model Movie {
  id        Int      @id @default(autoincrement())
  title     String
  year      Int
  poster    String?
  createdAt DateTime @default(now())
  likes     Like[]
  watches   Watch[]
  ratings   Rating[]
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  createdAt DateTime @default(now())

  @@unique([userId, movieId])
}

model Watch {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  createdAt DateTime @default(now())

  @@unique([userId, movieId])
}

model Rating {
  id        Int      @id @default(autoincrement())
  rating    Int      @db.SmallInt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  createdAt DateTime @default(now())

  @@unique([userId, movieId])
}
